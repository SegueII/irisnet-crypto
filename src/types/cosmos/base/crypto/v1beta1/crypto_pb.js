// source: cosmos/base/crypto/v1beta1/crypto.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var gogoproto_gogo_pb = require('../../../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
goog.exportSymbol('proto.cosmos.base.crypto.v1beta1.CompactBitArray', null, global);
goog.exportSymbol('proto.cosmos.base.crypto.v1beta1.MultiSignature', null, global);
goog.exportSymbol('proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold', null, global);
goog.exportSymbol('proto.cosmos.base.crypto.v1beta1.PublicKey', null, global);
goog.exportSymbol('proto.cosmos.base.crypto.v1beta1.PublicKey.SumCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.crypto.v1beta1.PublicKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.cosmos.base.crypto.v1beta1.PublicKey.oneofGroups_);
};
goog.inherits(proto.cosmos.base.crypto.v1beta1.PublicKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.crypto.v1beta1.PublicKey.displayName = 'proto.cosmos.base.crypto.v1beta1.PublicKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold.repeatedFields_, null);
};
goog.inherits(proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold.displayName = 'proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.crypto.v1beta1.MultiSignature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.cosmos.base.crypto.v1beta1.MultiSignature.repeatedFields_, null);
};
goog.inherits(proto.cosmos.base.crypto.v1beta1.MultiSignature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.crypto.v1beta1.MultiSignature.displayName = 'proto.cosmos.base.crypto.v1beta1.MultiSignature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.base.crypto.v1beta1.CompactBitArray = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.base.crypto.v1beta1.CompactBitArray, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cosmos.base.crypto.v1beta1.CompactBitArray.displayName = 'proto.cosmos.base.crypto.v1beta1.CompactBitArray';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.oneofGroups_ = [[1,2,3,4,5,15]];

/**
 * @enum {number}
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.SumCase = {
  SUM_NOT_SET: 0,
  SECP256K1: 1,
  ED25519: 2,
  SR25519: 3,
  MULTISIG: 4,
  SECP256R1: 5,
  ANY_PUBKEY: 15
};

/**
 * @return {proto.cosmos.base.crypto.v1beta1.PublicKey.SumCase}
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.getSumCase = function() {
  return /** @type {proto.cosmos.base.crypto.v1beta1.PublicKey.SumCase} */(jspb.Message.computeOneofCase(this, proto.cosmos.base.crypto.v1beta1.PublicKey.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.crypto.v1beta1.PublicKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.crypto.v1beta1.PublicKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    secp256k1: msg.getSecp256k1_asB64(),
    ed25519: msg.getEd25519_asB64(),
    sr25519: msg.getSr25519_asB64(),
    multisig: (f = msg.getMultisig()) && proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold.toObject(includeInstance, f),
    secp256r1: msg.getSecp256r1_asB64(),
    anyPubkey: (f = msg.getAnyPubkey()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.crypto.v1beta1.PublicKey}
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.crypto.v1beta1.PublicKey;
  return proto.cosmos.base.crypto.v1beta1.PublicKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.crypto.v1beta1.PublicKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.crypto.v1beta1.PublicKey}
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSecp256k1(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEd25519(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSr25519(value);
      break;
    case 4:
      var value = new proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold;
      reader.readMessage(value,proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold.deserializeBinaryFromReader);
      msg.setMultisig(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSecp256r1(value);
      break;
    case 15:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setAnyPubkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.crypto.v1beta1.PublicKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.crypto.v1beta1.PublicKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getMultisig();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getAnyPubkey();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes secp256k1 = 1;
 * @return {!(string|Uint8Array)}
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.getSecp256k1 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes secp256k1 = 1;
 * This is a type-conversion wrapper around `getSecp256k1()`
 * @return {string}
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.getSecp256k1_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSecp256k1()));
};


/**
 * optional bytes secp256k1 = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSecp256k1()`
 * @return {!Uint8Array}
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.getSecp256k1_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSecp256k1()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cosmos.base.crypto.v1beta1.PublicKey} returns this
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.setSecp256k1 = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.cosmos.base.crypto.v1beta1.PublicKey.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.cosmos.base.crypto.v1beta1.PublicKey} returns this
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.clearSecp256k1 = function() {
  return jspb.Message.setOneofField(this, 1, proto.cosmos.base.crypto.v1beta1.PublicKey.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.hasSecp256k1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes ed25519 = 2;
 * @return {!(string|Uint8Array)}
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.getEd25519 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes ed25519 = 2;
 * This is a type-conversion wrapper around `getEd25519()`
 * @return {string}
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.getEd25519_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEd25519()));
};


/**
 * optional bytes ed25519 = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEd25519()`
 * @return {!Uint8Array}
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.getEd25519_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEd25519()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cosmos.base.crypto.v1beta1.PublicKey} returns this
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.setEd25519 = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.cosmos.base.crypto.v1beta1.PublicKey.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.cosmos.base.crypto.v1beta1.PublicKey} returns this
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.clearEd25519 = function() {
  return jspb.Message.setOneofField(this, 2, proto.cosmos.base.crypto.v1beta1.PublicKey.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.hasEd25519 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes sr25519 = 3;
 * @return {!(string|Uint8Array)}
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.getSr25519 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes sr25519 = 3;
 * This is a type-conversion wrapper around `getSr25519()`
 * @return {string}
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.getSr25519_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSr25519()));
};


/**
 * optional bytes sr25519 = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSr25519()`
 * @return {!Uint8Array}
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.getSr25519_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSr25519()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cosmos.base.crypto.v1beta1.PublicKey} returns this
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.setSr25519 = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.cosmos.base.crypto.v1beta1.PublicKey.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.cosmos.base.crypto.v1beta1.PublicKey} returns this
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.clearSr25519 = function() {
  return jspb.Message.setOneofField(this, 3, proto.cosmos.base.crypto.v1beta1.PublicKey.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.hasSr25519 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PubKeyMultisigThreshold multisig = 4;
 * @return {?proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold}
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.getMultisig = function() {
  return /** @type{?proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold} */ (
    jspb.Message.getWrapperField(this, proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold, 4));
};


/**
 * @param {?proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold|undefined} value
 * @return {!proto.cosmos.base.crypto.v1beta1.PublicKey} returns this
*/
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.setMultisig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.cosmos.base.crypto.v1beta1.PublicKey.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cosmos.base.crypto.v1beta1.PublicKey} returns this
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.clearMultisig = function() {
  return this.setMultisig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.hasMultisig = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes secp256r1 = 5;
 * @return {!(string|Uint8Array)}
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.getSecp256r1 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes secp256r1 = 5;
 * This is a type-conversion wrapper around `getSecp256r1()`
 * @return {string}
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.getSecp256r1_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSecp256r1()));
};


/**
 * optional bytes secp256r1 = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSecp256r1()`
 * @return {!Uint8Array}
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.getSecp256r1_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSecp256r1()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cosmos.base.crypto.v1beta1.PublicKey} returns this
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.setSecp256r1 = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.cosmos.base.crypto.v1beta1.PublicKey.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.cosmos.base.crypto.v1beta1.PublicKey} returns this
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.clearSecp256r1 = function() {
  return jspb.Message.setOneofField(this, 5, proto.cosmos.base.crypto.v1beta1.PublicKey.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.hasSecp256r1 = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional google.protobuf.Any any_pubkey = 15;
 * @return {?proto.google.protobuf.Any}
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.getAnyPubkey = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 15));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.cosmos.base.crypto.v1beta1.PublicKey} returns this
*/
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.setAnyPubkey = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.cosmos.base.crypto.v1beta1.PublicKey.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cosmos.base.crypto.v1beta1.PublicKey} returns this
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.clearAnyPubkey = function() {
  return this.setAnyPubkey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cosmos.base.crypto.v1beta1.PublicKey.prototype.hasAnyPubkey = function() {
  return jspb.Message.getField(this, 15) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold.toObject = function(includeInstance, msg) {
  var f, obj = {
    threshold: jspb.Message.getFieldWithDefault(msg, 1, 0),
    publicKeysList: jspb.Message.toObjectList(msg.getPublicKeysList(),
    proto.cosmos.base.crypto.v1beta1.PublicKey.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold}
 */
proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold;
  return proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold}
 */
proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setThreshold(value);
      break;
    case 2:
      var value = new proto.cosmos.base.crypto.v1beta1.PublicKey;
      reader.readMessage(value,proto.cosmos.base.crypto.v1beta1.PublicKey.deserializeBinaryFromReader);
      msg.addPublicKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThreshold();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPublicKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.cosmos.base.crypto.v1beta1.PublicKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 threshold = 1;
 * @return {number}
 */
proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold.prototype.getThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold} returns this
 */
proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold.prototype.setThreshold = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated PublicKey public_keys = 2;
 * @return {!Array<!proto.cosmos.base.crypto.v1beta1.PublicKey>}
 */
proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold.prototype.getPublicKeysList = function() {
  return /** @type{!Array<!proto.cosmos.base.crypto.v1beta1.PublicKey>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.cosmos.base.crypto.v1beta1.PublicKey, 2));
};


/**
 * @param {!Array<!proto.cosmos.base.crypto.v1beta1.PublicKey>} value
 * @return {!proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold} returns this
*/
proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold.prototype.setPublicKeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.cosmos.base.crypto.v1beta1.PublicKey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.crypto.v1beta1.PublicKey}
 */
proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold.prototype.addPublicKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.cosmos.base.crypto.v1beta1.PublicKey, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold} returns this
 */
proto.cosmos.base.crypto.v1beta1.PubKeyMultisigThreshold.prototype.clearPublicKeysList = function() {
  return this.setPublicKeysList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.cosmos.base.crypto.v1beta1.MultiSignature.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.crypto.v1beta1.MultiSignature.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.crypto.v1beta1.MultiSignature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.crypto.v1beta1.MultiSignature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.crypto.v1beta1.MultiSignature.toObject = function(includeInstance, msg) {
  var f, obj = {
    signaturesList: msg.getSignaturesList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.crypto.v1beta1.MultiSignature}
 */
proto.cosmos.base.crypto.v1beta1.MultiSignature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.crypto.v1beta1.MultiSignature;
  return proto.cosmos.base.crypto.v1beta1.MultiSignature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.crypto.v1beta1.MultiSignature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.crypto.v1beta1.MultiSignature}
 */
proto.cosmos.base.crypto.v1beta1.MultiSignature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addSignatures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.crypto.v1beta1.MultiSignature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.crypto.v1beta1.MultiSignature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.crypto.v1beta1.MultiSignature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.crypto.v1beta1.MultiSignature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignaturesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * repeated bytes signatures = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.cosmos.base.crypto.v1beta1.MultiSignature.prototype.getSignaturesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes signatures = 1;
 * This is a type-conversion wrapper around `getSignaturesList()`
 * @return {!Array<string>}
 */
proto.cosmos.base.crypto.v1beta1.MultiSignature.prototype.getSignaturesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getSignaturesList()));
};


/**
 * repeated bytes signatures = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignaturesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.cosmos.base.crypto.v1beta1.MultiSignature.prototype.getSignaturesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getSignaturesList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.cosmos.base.crypto.v1beta1.MultiSignature} returns this
 */
proto.cosmos.base.crypto.v1beta1.MultiSignature.prototype.setSignaturesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.crypto.v1beta1.MultiSignature} returns this
 */
proto.cosmos.base.crypto.v1beta1.MultiSignature.prototype.addSignatures = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.cosmos.base.crypto.v1beta1.MultiSignature} returns this
 */
proto.cosmos.base.crypto.v1beta1.MultiSignature.prototype.clearSignaturesList = function() {
  return this.setSignaturesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cosmos.base.crypto.v1beta1.CompactBitArray.prototype.toObject = function(opt_includeInstance) {
  return proto.cosmos.base.crypto.v1beta1.CompactBitArray.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.base.crypto.v1beta1.CompactBitArray} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.crypto.v1beta1.CompactBitArray.toObject = function(includeInstance, msg) {
  var f, obj = {
    extraBitsStored: jspb.Message.getFieldWithDefault(msg, 1, 0),
    elems: msg.getElems_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.base.crypto.v1beta1.CompactBitArray}
 */
proto.cosmos.base.crypto.v1beta1.CompactBitArray.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cosmos.base.crypto.v1beta1.CompactBitArray;
  return proto.cosmos.base.crypto.v1beta1.CompactBitArray.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.base.crypto.v1beta1.CompactBitArray} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.base.crypto.v1beta1.CompactBitArray}
 */
proto.cosmos.base.crypto.v1beta1.CompactBitArray.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExtraBitsStored(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setElems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.base.crypto.v1beta1.CompactBitArray.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cosmos.base.crypto.v1beta1.CompactBitArray.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.base.crypto.v1beta1.CompactBitArray} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.base.crypto.v1beta1.CompactBitArray.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExtraBitsStored();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getElems_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint32 extra_bits_stored = 1;
 * @return {number}
 */
proto.cosmos.base.crypto.v1beta1.CompactBitArray.prototype.getExtraBitsStored = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.cosmos.base.crypto.v1beta1.CompactBitArray} returns this
 */
proto.cosmos.base.crypto.v1beta1.CompactBitArray.prototype.setExtraBitsStored = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes elems = 2;
 * @return {!(string|Uint8Array)}
 */
proto.cosmos.base.crypto.v1beta1.CompactBitArray.prototype.getElems = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes elems = 2;
 * This is a type-conversion wrapper around `getElems()`
 * @return {string}
 */
proto.cosmos.base.crypto.v1beta1.CompactBitArray.prototype.getElems_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getElems()));
};


/**
 * optional bytes elems = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getElems()`
 * @return {!Uint8Array}
 */
proto.cosmos.base.crypto.v1beta1.CompactBitArray.prototype.getElems_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getElems()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.cosmos.base.crypto.v1beta1.CompactBitArray} returns this
 */
proto.cosmos.base.crypto.v1beta1.CompactBitArray.prototype.setElems = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


goog.object.extend(exports, proto.cosmos.base.crypto.v1beta1);
