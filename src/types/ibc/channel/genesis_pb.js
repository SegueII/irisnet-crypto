// source: ibc/channel/genesis.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var gogoproto_gogo_pb = require('../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var ibc_channel_channel_pb = require('../../ibc/channel/channel_pb.js');
goog.object.extend(proto, ibc_channel_channel_pb);
goog.exportSymbol('proto.ibc.channel.GenesisState', null, global);
goog.exportSymbol('proto.ibc.channel.PacketSequence', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.channel.GenesisState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ibc.channel.GenesisState.repeatedFields_, null);
};
goog.inherits(proto.ibc.channel.GenesisState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.channel.GenesisState.displayName = 'proto.ibc.channel.GenesisState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.channel.PacketSequence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.channel.PacketSequence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.channel.PacketSequence.displayName = 'proto.ibc.channel.PacketSequence';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ibc.channel.GenesisState.repeatedFields_ = [1,2,3,4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.channel.GenesisState.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.channel.GenesisState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.channel.GenesisState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.channel.GenesisState.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelsList: jspb.Message.toObjectList(msg.getChannelsList(),
    ibc_channel_channel_pb.IdentifiedChannel.toObject, includeInstance),
    acknowledgementsList: jspb.Message.toObjectList(msg.getAcknowledgementsList(),
    ibc_channel_channel_pb.PacketAckCommitment.toObject, includeInstance),
    commitmentsList: jspb.Message.toObjectList(msg.getCommitmentsList(),
    ibc_channel_channel_pb.PacketAckCommitment.toObject, includeInstance),
    sendSequencesList: jspb.Message.toObjectList(msg.getSendSequencesList(),
    proto.ibc.channel.PacketSequence.toObject, includeInstance),
    recvSequencesList: jspb.Message.toObjectList(msg.getRecvSequencesList(),
    proto.ibc.channel.PacketSequence.toObject, includeInstance),
    ackSequencesList: jspb.Message.toObjectList(msg.getAckSequencesList(),
    proto.ibc.channel.PacketSequence.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.channel.GenesisState}
 */
proto.ibc.channel.GenesisState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.channel.GenesisState;
  return proto.ibc.channel.GenesisState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.channel.GenesisState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.channel.GenesisState}
 */
proto.ibc.channel.GenesisState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new ibc_channel_channel_pb.IdentifiedChannel;
      reader.readMessage(value,ibc_channel_channel_pb.IdentifiedChannel.deserializeBinaryFromReader);
      msg.addChannels(value);
      break;
    case 2:
      var value = new ibc_channel_channel_pb.PacketAckCommitment;
      reader.readMessage(value,ibc_channel_channel_pb.PacketAckCommitment.deserializeBinaryFromReader);
      msg.addAcknowledgements(value);
      break;
    case 3:
      var value = new ibc_channel_channel_pb.PacketAckCommitment;
      reader.readMessage(value,ibc_channel_channel_pb.PacketAckCommitment.deserializeBinaryFromReader);
      msg.addCommitments(value);
      break;
    case 4:
      var value = new proto.ibc.channel.PacketSequence;
      reader.readMessage(value,proto.ibc.channel.PacketSequence.deserializeBinaryFromReader);
      msg.addSendSequences(value);
      break;
    case 5:
      var value = new proto.ibc.channel.PacketSequence;
      reader.readMessage(value,proto.ibc.channel.PacketSequence.deserializeBinaryFromReader);
      msg.addRecvSequences(value);
      break;
    case 6:
      var value = new proto.ibc.channel.PacketSequence;
      reader.readMessage(value,proto.ibc.channel.PacketSequence.deserializeBinaryFromReader);
      msg.addAckSequences(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.channel.GenesisState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.channel.GenesisState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.channel.GenesisState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.channel.GenesisState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      ibc_channel_channel_pb.IdentifiedChannel.serializeBinaryToWriter
    );
  }
  f = message.getAcknowledgementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      ibc_channel_channel_pb.PacketAckCommitment.serializeBinaryToWriter
    );
  }
  f = message.getCommitmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      ibc_channel_channel_pb.PacketAckCommitment.serializeBinaryToWriter
    );
  }
  f = message.getSendSequencesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.ibc.channel.PacketSequence.serializeBinaryToWriter
    );
  }
  f = message.getRecvSequencesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.ibc.channel.PacketSequence.serializeBinaryToWriter
    );
  }
  f = message.getAckSequencesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.ibc.channel.PacketSequence.serializeBinaryToWriter
    );
  }
};


/**
 * repeated IdentifiedChannel channels = 1;
 * @return {!Array<!proto.ibc.channel.IdentifiedChannel>}
 */
proto.ibc.channel.GenesisState.prototype.getChannelsList = function() {
  return /** @type{!Array<!proto.ibc.channel.IdentifiedChannel>} */ (
    jspb.Message.getRepeatedWrapperField(this, ibc_channel_channel_pb.IdentifiedChannel, 1));
};


/**
 * @param {!Array<!proto.ibc.channel.IdentifiedChannel>} value
 * @return {!proto.ibc.channel.GenesisState} returns this
*/
proto.ibc.channel.GenesisState.prototype.setChannelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ibc.channel.IdentifiedChannel=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ibc.channel.IdentifiedChannel}
 */
proto.ibc.channel.GenesisState.prototype.addChannels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ibc.channel.IdentifiedChannel, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ibc.channel.GenesisState} returns this
 */
proto.ibc.channel.GenesisState.prototype.clearChannelsList = function() {
  return this.setChannelsList([]);
};


/**
 * repeated PacketAckCommitment acknowledgements = 2;
 * @return {!Array<!proto.ibc.channel.PacketAckCommitment>}
 */
proto.ibc.channel.GenesisState.prototype.getAcknowledgementsList = function() {
  return /** @type{!Array<!proto.ibc.channel.PacketAckCommitment>} */ (
    jspb.Message.getRepeatedWrapperField(this, ibc_channel_channel_pb.PacketAckCommitment, 2));
};


/**
 * @param {!Array<!proto.ibc.channel.PacketAckCommitment>} value
 * @return {!proto.ibc.channel.GenesisState} returns this
*/
proto.ibc.channel.GenesisState.prototype.setAcknowledgementsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ibc.channel.PacketAckCommitment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ibc.channel.PacketAckCommitment}
 */
proto.ibc.channel.GenesisState.prototype.addAcknowledgements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ibc.channel.PacketAckCommitment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ibc.channel.GenesisState} returns this
 */
proto.ibc.channel.GenesisState.prototype.clearAcknowledgementsList = function() {
  return this.setAcknowledgementsList([]);
};


/**
 * repeated PacketAckCommitment commitments = 3;
 * @return {!Array<!proto.ibc.channel.PacketAckCommitment>}
 */
proto.ibc.channel.GenesisState.prototype.getCommitmentsList = function() {
  return /** @type{!Array<!proto.ibc.channel.PacketAckCommitment>} */ (
    jspb.Message.getRepeatedWrapperField(this, ibc_channel_channel_pb.PacketAckCommitment, 3));
};


/**
 * @param {!Array<!proto.ibc.channel.PacketAckCommitment>} value
 * @return {!proto.ibc.channel.GenesisState} returns this
*/
proto.ibc.channel.GenesisState.prototype.setCommitmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ibc.channel.PacketAckCommitment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ibc.channel.PacketAckCommitment}
 */
proto.ibc.channel.GenesisState.prototype.addCommitments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ibc.channel.PacketAckCommitment, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ibc.channel.GenesisState} returns this
 */
proto.ibc.channel.GenesisState.prototype.clearCommitmentsList = function() {
  return this.setCommitmentsList([]);
};


/**
 * repeated PacketSequence send_sequences = 4;
 * @return {!Array<!proto.ibc.channel.PacketSequence>}
 */
proto.ibc.channel.GenesisState.prototype.getSendSequencesList = function() {
  return /** @type{!Array<!proto.ibc.channel.PacketSequence>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ibc.channel.PacketSequence, 4));
};


/**
 * @param {!Array<!proto.ibc.channel.PacketSequence>} value
 * @return {!proto.ibc.channel.GenesisState} returns this
*/
proto.ibc.channel.GenesisState.prototype.setSendSequencesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.ibc.channel.PacketSequence=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ibc.channel.PacketSequence}
 */
proto.ibc.channel.GenesisState.prototype.addSendSequences = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.ibc.channel.PacketSequence, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ibc.channel.GenesisState} returns this
 */
proto.ibc.channel.GenesisState.prototype.clearSendSequencesList = function() {
  return this.setSendSequencesList([]);
};


/**
 * repeated PacketSequence recv_sequences = 5;
 * @return {!Array<!proto.ibc.channel.PacketSequence>}
 */
proto.ibc.channel.GenesisState.prototype.getRecvSequencesList = function() {
  return /** @type{!Array<!proto.ibc.channel.PacketSequence>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ibc.channel.PacketSequence, 5));
};


/**
 * @param {!Array<!proto.ibc.channel.PacketSequence>} value
 * @return {!proto.ibc.channel.GenesisState} returns this
*/
proto.ibc.channel.GenesisState.prototype.setRecvSequencesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.ibc.channel.PacketSequence=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ibc.channel.PacketSequence}
 */
proto.ibc.channel.GenesisState.prototype.addRecvSequences = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.ibc.channel.PacketSequence, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ibc.channel.GenesisState} returns this
 */
proto.ibc.channel.GenesisState.prototype.clearRecvSequencesList = function() {
  return this.setRecvSequencesList([]);
};


/**
 * repeated PacketSequence ack_sequences = 6;
 * @return {!Array<!proto.ibc.channel.PacketSequence>}
 */
proto.ibc.channel.GenesisState.prototype.getAckSequencesList = function() {
  return /** @type{!Array<!proto.ibc.channel.PacketSequence>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ibc.channel.PacketSequence, 6));
};


/**
 * @param {!Array<!proto.ibc.channel.PacketSequence>} value
 * @return {!proto.ibc.channel.GenesisState} returns this
*/
proto.ibc.channel.GenesisState.prototype.setAckSequencesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.ibc.channel.PacketSequence=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ibc.channel.PacketSequence}
 */
proto.ibc.channel.GenesisState.prototype.addAckSequences = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.ibc.channel.PacketSequence, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ibc.channel.GenesisState} returns this
 */
proto.ibc.channel.GenesisState.prototype.clearAckSequencesList = function() {
  return this.setAckSequencesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.channel.PacketSequence.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.channel.PacketSequence.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.channel.PacketSequence} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.channel.PacketSequence.toObject = function(includeInstance, msg) {
  var f, obj = {
    portId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    channelId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sequence: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.channel.PacketSequence}
 */
proto.ibc.channel.PacketSequence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.channel.PacketSequence;
  return proto.ibc.channel.PacketSequence.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.channel.PacketSequence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.channel.PacketSequence}
 */
proto.ibc.channel.PacketSequence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPortId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.channel.PacketSequence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.channel.PacketSequence.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.channel.PacketSequence} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.channel.PacketSequence.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPortId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChannelId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string port_id = 1;
 * @return {string}
 */
proto.ibc.channel.PacketSequence.prototype.getPortId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.channel.PacketSequence} returns this
 */
proto.ibc.channel.PacketSequence.prototype.setPortId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string channel_id = 2;
 * @return {string}
 */
proto.ibc.channel.PacketSequence.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.channel.PacketSequence} returns this
 */
proto.ibc.channel.PacketSequence.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 sequence = 3;
 * @return {number}
 */
proto.ibc.channel.PacketSequence.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ibc.channel.PacketSequence} returns this
 */
proto.ibc.channel.PacketSequence.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


goog.object.extend(exports, proto.ibc.channel);
