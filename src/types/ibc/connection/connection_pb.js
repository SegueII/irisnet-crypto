// source: ibc/connection/connection.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var gogoproto_gogo_pb = require('../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
var ibc_commitment_commitment_pb = require('../../ibc/commitment/commitment_pb.js');
goog.object.extend(proto, ibc_commitment_commitment_pb);
var ibc_client_client_pb = require('../../ibc/client/client_pb.js');
goog.object.extend(proto, ibc_client_client_pb);
goog.exportSymbol('proto.ibc.connection.ClientPaths', null, global);
goog.exportSymbol('proto.ibc.connection.ConnectionEnd', null, global);
goog.exportSymbol('proto.ibc.connection.ConnectionPaths', null, global);
goog.exportSymbol('proto.ibc.connection.Counterparty', null, global);
goog.exportSymbol('proto.ibc.connection.IdentifiedConnection', null, global);
goog.exportSymbol('proto.ibc.connection.MsgConnectionOpenAck', null, global);
goog.exportSymbol('proto.ibc.connection.MsgConnectionOpenConfirm', null, global);
goog.exportSymbol('proto.ibc.connection.MsgConnectionOpenInit', null, global);
goog.exportSymbol('proto.ibc.connection.MsgConnectionOpenTry', null, global);
goog.exportSymbol('proto.ibc.connection.State', null, global);
goog.exportSymbol('proto.ibc.connection.Version', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.connection.MsgConnectionOpenInit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.connection.MsgConnectionOpenInit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.connection.MsgConnectionOpenInit.displayName = 'proto.ibc.connection.MsgConnectionOpenInit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.connection.MsgConnectionOpenTry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ibc.connection.MsgConnectionOpenTry.repeatedFields_, null);
};
goog.inherits(proto.ibc.connection.MsgConnectionOpenTry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.connection.MsgConnectionOpenTry.displayName = 'proto.ibc.connection.MsgConnectionOpenTry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.connection.MsgConnectionOpenAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.connection.MsgConnectionOpenAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.connection.MsgConnectionOpenAck.displayName = 'proto.ibc.connection.MsgConnectionOpenAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.connection.MsgConnectionOpenConfirm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.connection.MsgConnectionOpenConfirm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.connection.MsgConnectionOpenConfirm.displayName = 'proto.ibc.connection.MsgConnectionOpenConfirm';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.connection.ConnectionEnd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ibc.connection.ConnectionEnd.repeatedFields_, null);
};
goog.inherits(proto.ibc.connection.ConnectionEnd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.connection.ConnectionEnd.displayName = 'proto.ibc.connection.ConnectionEnd';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.connection.IdentifiedConnection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ibc.connection.IdentifiedConnection.repeatedFields_, null);
};
goog.inherits(proto.ibc.connection.IdentifiedConnection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.connection.IdentifiedConnection.displayName = 'proto.ibc.connection.IdentifiedConnection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.connection.Counterparty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.connection.Counterparty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.connection.Counterparty.displayName = 'proto.ibc.connection.Counterparty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.connection.ClientPaths = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ibc.connection.ClientPaths.repeatedFields_, null);
};
goog.inherits(proto.ibc.connection.ClientPaths, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.connection.ClientPaths.displayName = 'proto.ibc.connection.ClientPaths';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.connection.ConnectionPaths = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ibc.connection.ConnectionPaths.repeatedFields_, null);
};
goog.inherits(proto.ibc.connection.ConnectionPaths, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.connection.ConnectionPaths.displayName = 'proto.ibc.connection.ConnectionPaths';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.connection.Version = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ibc.connection.Version.repeatedFields_, null);
};
goog.inherits(proto.ibc.connection.Version, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ibc.connection.Version.displayName = 'proto.ibc.connection.Version';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.connection.MsgConnectionOpenInit.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.connection.MsgConnectionOpenInit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.connection.MsgConnectionOpenInit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.connection.MsgConnectionOpenInit.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    connectionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    counterparty: (f = msg.getCounterparty()) && proto.ibc.connection.Counterparty.toObject(includeInstance, f),
    signer: msg.getSigner_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.connection.MsgConnectionOpenInit}
 */
proto.ibc.connection.MsgConnectionOpenInit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.connection.MsgConnectionOpenInit;
  return proto.ibc.connection.MsgConnectionOpenInit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.connection.MsgConnectionOpenInit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.connection.MsgConnectionOpenInit}
 */
proto.ibc.connection.MsgConnectionOpenInit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionId(value);
      break;
    case 3:
      var value = new proto.ibc.connection.Counterparty;
      reader.readMessage(value,proto.ibc.connection.Counterparty.deserializeBinaryFromReader);
      msg.setCounterparty(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.connection.MsgConnectionOpenInit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.connection.MsgConnectionOpenInit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.connection.MsgConnectionOpenInit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.connection.MsgConnectionOpenInit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConnectionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCounterparty();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ibc.connection.Counterparty.serializeBinaryToWriter
    );
  }
  f = message.getSigner_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.ibc.connection.MsgConnectionOpenInit.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.connection.MsgConnectionOpenInit} returns this
 */
proto.ibc.connection.MsgConnectionOpenInit.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string connection_id = 2;
 * @return {string}
 */
proto.ibc.connection.MsgConnectionOpenInit.prototype.getConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.connection.MsgConnectionOpenInit} returns this
 */
proto.ibc.connection.MsgConnectionOpenInit.prototype.setConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Counterparty counterparty = 3;
 * @return {?proto.ibc.connection.Counterparty}
 */
proto.ibc.connection.MsgConnectionOpenInit.prototype.getCounterparty = function() {
  return /** @type{?proto.ibc.connection.Counterparty} */ (
    jspb.Message.getWrapperField(this, proto.ibc.connection.Counterparty, 3));
};


/**
 * @param {?proto.ibc.connection.Counterparty|undefined} value
 * @return {!proto.ibc.connection.MsgConnectionOpenInit} returns this
*/
proto.ibc.connection.MsgConnectionOpenInit.prototype.setCounterparty = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.connection.MsgConnectionOpenInit} returns this
 */
proto.ibc.connection.MsgConnectionOpenInit.prototype.clearCounterparty = function() {
  return this.setCounterparty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.connection.MsgConnectionOpenInit.prototype.hasCounterparty = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes signer = 4;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.connection.MsgConnectionOpenInit.prototype.getSigner = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes signer = 4;
 * This is a type-conversion wrapper around `getSigner()`
 * @return {string}
 */
proto.ibc.connection.MsgConnectionOpenInit.prototype.getSigner_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSigner()));
};


/**
 * optional bytes signer = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSigner()`
 * @return {!Uint8Array}
 */
proto.ibc.connection.MsgConnectionOpenInit.prototype.getSigner_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSigner()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.connection.MsgConnectionOpenInit} returns this
 */
proto.ibc.connection.MsgConnectionOpenInit.prototype.setSigner = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ibc.connection.MsgConnectionOpenTry.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.connection.MsgConnectionOpenTry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.connection.MsgConnectionOpenTry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.connection.MsgConnectionOpenTry.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    connectionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    clientState: (f = msg.getClientState()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    counterparty: (f = msg.getCounterparty()) && proto.ibc.connection.Counterparty.toObject(includeInstance, f),
    counterpartyVersionsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    proofHeight: (f = msg.getProofHeight()) && ibc_client_client_pb.Height.toObject(includeInstance, f),
    proofInit: msg.getProofInit_asB64(),
    proofClient: msg.getProofClient_asB64(),
    proofConsensus: msg.getProofConsensus_asB64(),
    consensusHeight: (f = msg.getConsensusHeight()) && ibc_client_client_pb.Height.toObject(includeInstance, f),
    signer: msg.getSigner_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.connection.MsgConnectionOpenTry}
 */
proto.ibc.connection.MsgConnectionOpenTry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.connection.MsgConnectionOpenTry;
  return proto.ibc.connection.MsgConnectionOpenTry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.connection.MsgConnectionOpenTry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.connection.MsgConnectionOpenTry}
 */
proto.ibc.connection.MsgConnectionOpenTry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionId(value);
      break;
    case 3:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setClientState(value);
      break;
    case 4:
      var value = new proto.ibc.connection.Counterparty;
      reader.readMessage(value,proto.ibc.connection.Counterparty.deserializeBinaryFromReader);
      msg.setCounterparty(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addCounterpartyVersions(value);
      break;
    case 6:
      var value = new ibc_client_client_pb.Height;
      reader.readMessage(value,ibc_client_client_pb.Height.deserializeBinaryFromReader);
      msg.setProofHeight(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofInit(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofClient(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofConsensus(value);
      break;
    case 10:
      var value = new ibc_client_client_pb.Height;
      reader.readMessage(value,ibc_client_client_pb.Height.deserializeBinaryFromReader);
      msg.setConsensusHeight(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.connection.MsgConnectionOpenTry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.connection.MsgConnectionOpenTry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.connection.MsgConnectionOpenTry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConnectionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getClientState();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getCounterparty();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ibc.connection.Counterparty.serializeBinaryToWriter
    );
  }
  f = message.getCounterpartyVersionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getProofHeight();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      ibc_client_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getProofInit_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getProofClient_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getProofConsensus_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getConsensusHeight();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      ibc_client_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getSigner_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.connection.MsgConnectionOpenTry} returns this
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string connection_id = 2;
 * @return {string}
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.getConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.connection.MsgConnectionOpenTry} returns this
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.setConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Any client_state = 3;
 * @return {?proto.google.protobuf.Any}
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.getClientState = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 3));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.ibc.connection.MsgConnectionOpenTry} returns this
*/
proto.ibc.connection.MsgConnectionOpenTry.prototype.setClientState = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.connection.MsgConnectionOpenTry} returns this
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.clearClientState = function() {
  return this.setClientState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.hasClientState = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Counterparty counterparty = 4;
 * @return {?proto.ibc.connection.Counterparty}
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.getCounterparty = function() {
  return /** @type{?proto.ibc.connection.Counterparty} */ (
    jspb.Message.getWrapperField(this, proto.ibc.connection.Counterparty, 4));
};


/**
 * @param {?proto.ibc.connection.Counterparty|undefined} value
 * @return {!proto.ibc.connection.MsgConnectionOpenTry} returns this
*/
proto.ibc.connection.MsgConnectionOpenTry.prototype.setCounterparty = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.connection.MsgConnectionOpenTry} returns this
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.clearCounterparty = function() {
  return this.setCounterparty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.hasCounterparty = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated string counterparty_versions = 5;
 * @return {!Array<string>}
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.getCounterpartyVersionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ibc.connection.MsgConnectionOpenTry} returns this
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.setCounterpartyVersionsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ibc.connection.MsgConnectionOpenTry} returns this
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.addCounterpartyVersions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ibc.connection.MsgConnectionOpenTry} returns this
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.clearCounterpartyVersionsList = function() {
  return this.setCounterpartyVersionsList([]);
};


/**
 * optional ibc.client.Height proof_height = 6;
 * @return {?proto.ibc.client.Height}
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.getProofHeight = function() {
  return /** @type{?proto.ibc.client.Height} */ (
    jspb.Message.getWrapperField(this, ibc_client_client_pb.Height, 6));
};


/**
 * @param {?proto.ibc.client.Height|undefined} value
 * @return {!proto.ibc.connection.MsgConnectionOpenTry} returns this
*/
proto.ibc.connection.MsgConnectionOpenTry.prototype.setProofHeight = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.connection.MsgConnectionOpenTry} returns this
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.clearProofHeight = function() {
  return this.setProofHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.hasProofHeight = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bytes proof_init = 7;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.getProofInit = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes proof_init = 7;
 * This is a type-conversion wrapper around `getProofInit()`
 * @return {string}
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.getProofInit_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofInit()));
};


/**
 * optional bytes proof_init = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofInit()`
 * @return {!Uint8Array}
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.getProofInit_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofInit()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.connection.MsgConnectionOpenTry} returns this
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.setProofInit = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes proof_client = 8;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.getProofClient = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes proof_client = 8;
 * This is a type-conversion wrapper around `getProofClient()`
 * @return {string}
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.getProofClient_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofClient()));
};


/**
 * optional bytes proof_client = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofClient()`
 * @return {!Uint8Array}
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.getProofClient_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofClient()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.connection.MsgConnectionOpenTry} returns this
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.setProofClient = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional bytes proof_consensus = 9;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.getProofConsensus = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes proof_consensus = 9;
 * This is a type-conversion wrapper around `getProofConsensus()`
 * @return {string}
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.getProofConsensus_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofConsensus()));
};


/**
 * optional bytes proof_consensus = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofConsensus()`
 * @return {!Uint8Array}
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.getProofConsensus_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofConsensus()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.connection.MsgConnectionOpenTry} returns this
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.setProofConsensus = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional ibc.client.Height consensus_height = 10;
 * @return {?proto.ibc.client.Height}
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.getConsensusHeight = function() {
  return /** @type{?proto.ibc.client.Height} */ (
    jspb.Message.getWrapperField(this, ibc_client_client_pb.Height, 10));
};


/**
 * @param {?proto.ibc.client.Height|undefined} value
 * @return {!proto.ibc.connection.MsgConnectionOpenTry} returns this
*/
proto.ibc.connection.MsgConnectionOpenTry.prototype.setConsensusHeight = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.connection.MsgConnectionOpenTry} returns this
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.clearConsensusHeight = function() {
  return this.setConsensusHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.hasConsensusHeight = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bytes signer = 11;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.getSigner = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes signer = 11;
 * This is a type-conversion wrapper around `getSigner()`
 * @return {string}
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.getSigner_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSigner()));
};


/**
 * optional bytes signer = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSigner()`
 * @return {!Uint8Array}
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.getSigner_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSigner()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.connection.MsgConnectionOpenTry} returns this
 */
proto.ibc.connection.MsgConnectionOpenTry.prototype.setSigner = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.connection.MsgConnectionOpenAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.connection.MsgConnectionOpenAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.connection.MsgConnectionOpenAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, ""),
    clientState: (f = msg.getClientState()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    proofHeight: (f = msg.getProofHeight()) && ibc_client_client_pb.Height.toObject(includeInstance, f),
    proofTry: msg.getProofTry_asB64(),
    proofClient: msg.getProofClient_asB64(),
    proofConsensus: msg.getProofConsensus_asB64(),
    consensusHeight: (f = msg.getConsensusHeight()) && ibc_client_client_pb.Height.toObject(includeInstance, f),
    signer: msg.getSigner_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.connection.MsgConnectionOpenAck}
 */
proto.ibc.connection.MsgConnectionOpenAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.connection.MsgConnectionOpenAck;
  return proto.ibc.connection.MsgConnectionOpenAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.connection.MsgConnectionOpenAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.connection.MsgConnectionOpenAck}
 */
proto.ibc.connection.MsgConnectionOpenAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setClientState(value);
      break;
    case 4:
      var value = new ibc_client_client_pb.Height;
      reader.readMessage(value,ibc_client_client_pb.Height.deserializeBinaryFromReader);
      msg.setProofHeight(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofTry(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofClient(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofConsensus(value);
      break;
    case 8:
      var value = new ibc_client_client_pb.Height;
      reader.readMessage(value,ibc_client_client_pb.Height.deserializeBinaryFromReader);
      msg.setConsensusHeight(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.connection.MsgConnectionOpenAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.connection.MsgConnectionOpenAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.connection.MsgConnectionOpenAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getClientState();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getProofHeight();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      ibc_client_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getProofTry_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getProofClient_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getProofConsensus_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getConsensusHeight();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      ibc_client_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getSigner_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
};


/**
 * optional string connection_id = 1;
 * @return {string}
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.getConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.connection.MsgConnectionOpenAck} returns this
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.setConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.connection.MsgConnectionOpenAck} returns this
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Any client_state = 3;
 * @return {?proto.google.protobuf.Any}
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.getClientState = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 3));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.ibc.connection.MsgConnectionOpenAck} returns this
*/
proto.ibc.connection.MsgConnectionOpenAck.prototype.setClientState = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.connection.MsgConnectionOpenAck} returns this
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.clearClientState = function() {
  return this.setClientState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.hasClientState = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ibc.client.Height proof_height = 4;
 * @return {?proto.ibc.client.Height}
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.getProofHeight = function() {
  return /** @type{?proto.ibc.client.Height} */ (
    jspb.Message.getWrapperField(this, ibc_client_client_pb.Height, 4));
};


/**
 * @param {?proto.ibc.client.Height|undefined} value
 * @return {!proto.ibc.connection.MsgConnectionOpenAck} returns this
*/
proto.ibc.connection.MsgConnectionOpenAck.prototype.setProofHeight = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.connection.MsgConnectionOpenAck} returns this
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.clearProofHeight = function() {
  return this.setProofHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.hasProofHeight = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes proof_try = 5;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.getProofTry = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes proof_try = 5;
 * This is a type-conversion wrapper around `getProofTry()`
 * @return {string}
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.getProofTry_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofTry()));
};


/**
 * optional bytes proof_try = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofTry()`
 * @return {!Uint8Array}
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.getProofTry_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofTry()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.connection.MsgConnectionOpenAck} returns this
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.setProofTry = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes proof_client = 6;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.getProofClient = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes proof_client = 6;
 * This is a type-conversion wrapper around `getProofClient()`
 * @return {string}
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.getProofClient_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofClient()));
};


/**
 * optional bytes proof_client = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofClient()`
 * @return {!Uint8Array}
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.getProofClient_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofClient()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.connection.MsgConnectionOpenAck} returns this
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.setProofClient = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes proof_consensus = 7;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.getProofConsensus = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes proof_consensus = 7;
 * This is a type-conversion wrapper around `getProofConsensus()`
 * @return {string}
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.getProofConsensus_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofConsensus()));
};


/**
 * optional bytes proof_consensus = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofConsensus()`
 * @return {!Uint8Array}
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.getProofConsensus_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofConsensus()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.connection.MsgConnectionOpenAck} returns this
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.setProofConsensus = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional ibc.client.Height consensus_height = 8;
 * @return {?proto.ibc.client.Height}
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.getConsensusHeight = function() {
  return /** @type{?proto.ibc.client.Height} */ (
    jspb.Message.getWrapperField(this, ibc_client_client_pb.Height, 8));
};


/**
 * @param {?proto.ibc.client.Height|undefined} value
 * @return {!proto.ibc.connection.MsgConnectionOpenAck} returns this
*/
proto.ibc.connection.MsgConnectionOpenAck.prototype.setConsensusHeight = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.connection.MsgConnectionOpenAck} returns this
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.clearConsensusHeight = function() {
  return this.setConsensusHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.hasConsensusHeight = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bytes signer = 9;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.getSigner = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes signer = 9;
 * This is a type-conversion wrapper around `getSigner()`
 * @return {string}
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.getSigner_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSigner()));
};


/**
 * optional bytes signer = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSigner()`
 * @return {!Uint8Array}
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.getSigner_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSigner()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.connection.MsgConnectionOpenAck} returns this
 */
proto.ibc.connection.MsgConnectionOpenAck.prototype.setSigner = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.connection.MsgConnectionOpenConfirm.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.connection.MsgConnectionOpenConfirm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.connection.MsgConnectionOpenConfirm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.connection.MsgConnectionOpenConfirm.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    proofAck: msg.getProofAck_asB64(),
    proofHeight: (f = msg.getProofHeight()) && ibc_client_client_pb.Height.toObject(includeInstance, f),
    signer: msg.getSigner_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.connection.MsgConnectionOpenConfirm}
 */
proto.ibc.connection.MsgConnectionOpenConfirm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.connection.MsgConnectionOpenConfirm;
  return proto.ibc.connection.MsgConnectionOpenConfirm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.connection.MsgConnectionOpenConfirm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.connection.MsgConnectionOpenConfirm}
 */
proto.ibc.connection.MsgConnectionOpenConfirm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProofAck(value);
      break;
    case 3:
      var value = new ibc_client_client_pb.Height;
      reader.readMessage(value,ibc_client_client_pb.Height.deserializeBinaryFromReader);
      msg.setProofHeight(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.connection.MsgConnectionOpenConfirm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.connection.MsgConnectionOpenConfirm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.connection.MsgConnectionOpenConfirm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.connection.MsgConnectionOpenConfirm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProofAck_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getProofHeight();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      ibc_client_client_pb.Height.serializeBinaryToWriter
    );
  }
  f = message.getSigner_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional string connection_id = 1;
 * @return {string}
 */
proto.ibc.connection.MsgConnectionOpenConfirm.prototype.getConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.connection.MsgConnectionOpenConfirm} returns this
 */
proto.ibc.connection.MsgConnectionOpenConfirm.prototype.setConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes proof_ack = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.connection.MsgConnectionOpenConfirm.prototype.getProofAck = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes proof_ack = 2;
 * This is a type-conversion wrapper around `getProofAck()`
 * @return {string}
 */
proto.ibc.connection.MsgConnectionOpenConfirm.prototype.getProofAck_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProofAck()));
};


/**
 * optional bytes proof_ack = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProofAck()`
 * @return {!Uint8Array}
 */
proto.ibc.connection.MsgConnectionOpenConfirm.prototype.getProofAck_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProofAck()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.connection.MsgConnectionOpenConfirm} returns this
 */
proto.ibc.connection.MsgConnectionOpenConfirm.prototype.setProofAck = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional ibc.client.Height proof_height = 3;
 * @return {?proto.ibc.client.Height}
 */
proto.ibc.connection.MsgConnectionOpenConfirm.prototype.getProofHeight = function() {
  return /** @type{?proto.ibc.client.Height} */ (
    jspb.Message.getWrapperField(this, ibc_client_client_pb.Height, 3));
};


/**
 * @param {?proto.ibc.client.Height|undefined} value
 * @return {!proto.ibc.connection.MsgConnectionOpenConfirm} returns this
*/
proto.ibc.connection.MsgConnectionOpenConfirm.prototype.setProofHeight = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.connection.MsgConnectionOpenConfirm} returns this
 */
proto.ibc.connection.MsgConnectionOpenConfirm.prototype.clearProofHeight = function() {
  return this.setProofHeight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.connection.MsgConnectionOpenConfirm.prototype.hasProofHeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes signer = 4;
 * @return {!(string|Uint8Array)}
 */
proto.ibc.connection.MsgConnectionOpenConfirm.prototype.getSigner = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes signer = 4;
 * This is a type-conversion wrapper around `getSigner()`
 * @return {string}
 */
proto.ibc.connection.MsgConnectionOpenConfirm.prototype.getSigner_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSigner()));
};


/**
 * optional bytes signer = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSigner()`
 * @return {!Uint8Array}
 */
proto.ibc.connection.MsgConnectionOpenConfirm.prototype.getSigner_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSigner()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ibc.connection.MsgConnectionOpenConfirm} returns this
 */
proto.ibc.connection.MsgConnectionOpenConfirm.prototype.setSigner = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ibc.connection.ConnectionEnd.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.connection.ConnectionEnd.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.connection.ConnectionEnd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.connection.ConnectionEnd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.connection.ConnectionEnd.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    versionsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    state: jspb.Message.getFieldWithDefault(msg, 3, 0),
    counterparty: (f = msg.getCounterparty()) && proto.ibc.connection.Counterparty.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.connection.ConnectionEnd}
 */
proto.ibc.connection.ConnectionEnd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.connection.ConnectionEnd;
  return proto.ibc.connection.ConnectionEnd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.connection.ConnectionEnd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.connection.ConnectionEnd}
 */
proto.ibc.connection.ConnectionEnd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addVersions(value);
      break;
    case 3:
      var value = /** @type {!proto.ibc.connection.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 4:
      var value = new proto.ibc.connection.Counterparty;
      reader.readMessage(value,proto.ibc.connection.Counterparty.deserializeBinaryFromReader);
      msg.setCounterparty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.connection.ConnectionEnd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.connection.ConnectionEnd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.connection.ConnectionEnd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.connection.ConnectionEnd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getCounterparty();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ibc.connection.Counterparty.serializeBinaryToWriter
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.ibc.connection.ConnectionEnd.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.connection.ConnectionEnd} returns this
 */
proto.ibc.connection.ConnectionEnd.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string versions = 2;
 * @return {!Array<string>}
 */
proto.ibc.connection.ConnectionEnd.prototype.getVersionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ibc.connection.ConnectionEnd} returns this
 */
proto.ibc.connection.ConnectionEnd.prototype.setVersionsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ibc.connection.ConnectionEnd} returns this
 */
proto.ibc.connection.ConnectionEnd.prototype.addVersions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ibc.connection.ConnectionEnd} returns this
 */
proto.ibc.connection.ConnectionEnd.prototype.clearVersionsList = function() {
  return this.setVersionsList([]);
};


/**
 * optional State state = 3;
 * @return {!proto.ibc.connection.State}
 */
proto.ibc.connection.ConnectionEnd.prototype.getState = function() {
  return /** @type {!proto.ibc.connection.State} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ibc.connection.State} value
 * @return {!proto.ibc.connection.ConnectionEnd} returns this
 */
proto.ibc.connection.ConnectionEnd.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Counterparty counterparty = 4;
 * @return {?proto.ibc.connection.Counterparty}
 */
proto.ibc.connection.ConnectionEnd.prototype.getCounterparty = function() {
  return /** @type{?proto.ibc.connection.Counterparty} */ (
    jspb.Message.getWrapperField(this, proto.ibc.connection.Counterparty, 4));
};


/**
 * @param {?proto.ibc.connection.Counterparty|undefined} value
 * @return {!proto.ibc.connection.ConnectionEnd} returns this
*/
proto.ibc.connection.ConnectionEnd.prototype.setCounterparty = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.connection.ConnectionEnd} returns this
 */
proto.ibc.connection.ConnectionEnd.prototype.clearCounterparty = function() {
  return this.setCounterparty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.connection.ConnectionEnd.prototype.hasCounterparty = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ibc.connection.IdentifiedConnection.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.connection.IdentifiedConnection.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.connection.IdentifiedConnection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.connection.IdentifiedConnection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.connection.IdentifiedConnection.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clientId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    versionsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    state: jspb.Message.getFieldWithDefault(msg, 4, 0),
    counterparty: (f = msg.getCounterparty()) && proto.ibc.connection.Counterparty.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.connection.IdentifiedConnection}
 */
proto.ibc.connection.IdentifiedConnection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.connection.IdentifiedConnection;
  return proto.ibc.connection.IdentifiedConnection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.connection.IdentifiedConnection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.connection.IdentifiedConnection}
 */
proto.ibc.connection.IdentifiedConnection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addVersions(value);
      break;
    case 4:
      var value = /** @type {!proto.ibc.connection.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 5:
      var value = new proto.ibc.connection.Counterparty;
      reader.readMessage(value,proto.ibc.connection.Counterparty.deserializeBinaryFromReader);
      msg.setCounterparty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.connection.IdentifiedConnection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.connection.IdentifiedConnection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.connection.IdentifiedConnection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.connection.IdentifiedConnection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVersionsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getCounterparty();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ibc.connection.Counterparty.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ibc.connection.IdentifiedConnection.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.connection.IdentifiedConnection} returns this
 */
proto.ibc.connection.IdentifiedConnection.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string client_id = 2;
 * @return {string}
 */
proto.ibc.connection.IdentifiedConnection.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.connection.IdentifiedConnection} returns this
 */
proto.ibc.connection.IdentifiedConnection.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string versions = 3;
 * @return {!Array<string>}
 */
proto.ibc.connection.IdentifiedConnection.prototype.getVersionsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ibc.connection.IdentifiedConnection} returns this
 */
proto.ibc.connection.IdentifiedConnection.prototype.setVersionsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ibc.connection.IdentifiedConnection} returns this
 */
proto.ibc.connection.IdentifiedConnection.prototype.addVersions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ibc.connection.IdentifiedConnection} returns this
 */
proto.ibc.connection.IdentifiedConnection.prototype.clearVersionsList = function() {
  return this.setVersionsList([]);
};


/**
 * optional State state = 4;
 * @return {!proto.ibc.connection.State}
 */
proto.ibc.connection.IdentifiedConnection.prototype.getState = function() {
  return /** @type {!proto.ibc.connection.State} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.ibc.connection.State} value
 * @return {!proto.ibc.connection.IdentifiedConnection} returns this
 */
proto.ibc.connection.IdentifiedConnection.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional Counterparty counterparty = 5;
 * @return {?proto.ibc.connection.Counterparty}
 */
proto.ibc.connection.IdentifiedConnection.prototype.getCounterparty = function() {
  return /** @type{?proto.ibc.connection.Counterparty} */ (
    jspb.Message.getWrapperField(this, proto.ibc.connection.Counterparty, 5));
};


/**
 * @param {?proto.ibc.connection.Counterparty|undefined} value
 * @return {!proto.ibc.connection.IdentifiedConnection} returns this
*/
proto.ibc.connection.IdentifiedConnection.prototype.setCounterparty = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.connection.IdentifiedConnection} returns this
 */
proto.ibc.connection.IdentifiedConnection.prototype.clearCounterparty = function() {
  return this.setCounterparty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.connection.IdentifiedConnection.prototype.hasCounterparty = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.connection.Counterparty.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.connection.Counterparty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.connection.Counterparty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.connection.Counterparty.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    connectionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    prefix: (f = msg.getPrefix()) && ibc_commitment_commitment_pb.MerklePrefix.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.connection.Counterparty}
 */
proto.ibc.connection.Counterparty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.connection.Counterparty;
  return proto.ibc.connection.Counterparty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.connection.Counterparty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.connection.Counterparty}
 */
proto.ibc.connection.Counterparty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setConnectionId(value);
      break;
    case 3:
      var value = new ibc_commitment_commitment_pb.MerklePrefix;
      reader.readMessage(value,ibc_commitment_commitment_pb.MerklePrefix.deserializeBinaryFromReader);
      msg.setPrefix(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.connection.Counterparty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.connection.Counterparty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.connection.Counterparty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.connection.Counterparty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConnectionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPrefix();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      ibc_commitment_commitment_pb.MerklePrefix.serializeBinaryToWriter
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.ibc.connection.Counterparty.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.connection.Counterparty} returns this
 */
proto.ibc.connection.Counterparty.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string connection_id = 2;
 * @return {string}
 */
proto.ibc.connection.Counterparty.prototype.getConnectionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.connection.Counterparty} returns this
 */
proto.ibc.connection.Counterparty.prototype.setConnectionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ibc.commitment.MerklePrefix prefix = 3;
 * @return {?proto.ibc.commitment.MerklePrefix}
 */
proto.ibc.connection.Counterparty.prototype.getPrefix = function() {
  return /** @type{?proto.ibc.commitment.MerklePrefix} */ (
    jspb.Message.getWrapperField(this, ibc_commitment_commitment_pb.MerklePrefix, 3));
};


/**
 * @param {?proto.ibc.commitment.MerklePrefix|undefined} value
 * @return {!proto.ibc.connection.Counterparty} returns this
*/
proto.ibc.connection.Counterparty.prototype.setPrefix = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ibc.connection.Counterparty} returns this
 */
proto.ibc.connection.Counterparty.prototype.clearPrefix = function() {
  return this.setPrefix(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ibc.connection.Counterparty.prototype.hasPrefix = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ibc.connection.ClientPaths.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.connection.ClientPaths.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.connection.ClientPaths.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.connection.ClientPaths} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.connection.ClientPaths.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.connection.ClientPaths}
 */
proto.ibc.connection.ClientPaths.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.connection.ClientPaths;
  return proto.ibc.connection.ClientPaths.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.connection.ClientPaths} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.connection.ClientPaths}
 */
proto.ibc.connection.ClientPaths.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addPaths(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.connection.ClientPaths.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.connection.ClientPaths.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.connection.ClientPaths} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.connection.ClientPaths.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string paths = 1;
 * @return {!Array<string>}
 */
proto.ibc.connection.ClientPaths.prototype.getPathsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ibc.connection.ClientPaths} returns this
 */
proto.ibc.connection.ClientPaths.prototype.setPathsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ibc.connection.ClientPaths} returns this
 */
proto.ibc.connection.ClientPaths.prototype.addPaths = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ibc.connection.ClientPaths} returns this
 */
proto.ibc.connection.ClientPaths.prototype.clearPathsList = function() {
  return this.setPathsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ibc.connection.ConnectionPaths.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.connection.ConnectionPaths.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.connection.ConnectionPaths.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.connection.ConnectionPaths} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.connection.ConnectionPaths.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pathsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.connection.ConnectionPaths}
 */
proto.ibc.connection.ConnectionPaths.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.connection.ConnectionPaths;
  return proto.ibc.connection.ConnectionPaths.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.connection.ConnectionPaths} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.connection.ConnectionPaths}
 */
proto.ibc.connection.ConnectionPaths.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addPaths(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.connection.ConnectionPaths.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.connection.ConnectionPaths.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.connection.ConnectionPaths} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.connection.ConnectionPaths.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPathsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.ibc.connection.ConnectionPaths.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.connection.ConnectionPaths} returns this
 */
proto.ibc.connection.ConnectionPaths.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string paths = 2;
 * @return {!Array<string>}
 */
proto.ibc.connection.ConnectionPaths.prototype.getPathsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ibc.connection.ConnectionPaths} returns this
 */
proto.ibc.connection.ConnectionPaths.prototype.setPathsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ibc.connection.ConnectionPaths} returns this
 */
proto.ibc.connection.ConnectionPaths.prototype.addPaths = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ibc.connection.ConnectionPaths} returns this
 */
proto.ibc.connection.ConnectionPaths.prototype.clearPathsList = function() {
  return this.setPathsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ibc.connection.Version.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ibc.connection.Version.prototype.toObject = function(opt_includeInstance) {
  return proto.ibc.connection.Version.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.connection.Version} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.connection.Version.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    featuresList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.connection.Version}
 */
proto.ibc.connection.Version.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ibc.connection.Version;
  return proto.ibc.connection.Version.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.connection.Version} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.connection.Version}
 */
proto.ibc.connection.Version.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addFeatures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.connection.Version.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ibc.connection.Version.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.connection.Version} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.connection.Version.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string identifier = 1;
 * @return {string}
 */
proto.ibc.connection.Version.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ibc.connection.Version} returns this
 */
proto.ibc.connection.Version.prototype.setIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string features = 2;
 * @return {!Array<string>}
 */
proto.ibc.connection.Version.prototype.getFeaturesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ibc.connection.Version} returns this
 */
proto.ibc.connection.Version.prototype.setFeaturesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ibc.connection.Version} returns this
 */
proto.ibc.connection.Version.prototype.addFeatures = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ibc.connection.Version} returns this
 */
proto.ibc.connection.Version.prototype.clearFeaturesList = function() {
  return this.setFeaturesList([]);
};


/**
 * @enum {number}
 */
proto.ibc.connection.State = {
  STATE_UNINITIALIZED_UNSPECIFIED: 0,
  STATE_INIT: 1,
  STATE_TRYOPEN: 2,
  STATE_OPEN: 3
};

goog.object.extend(exports, proto.ibc.connection);
